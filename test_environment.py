"""
Environment tesztel≈ë - alapvet≈ë funkci√≥k ellen≈ërz√©se
"""
import numpy as np
import time

from environment.rok_env import ROKEnvironment
from config.settings import DEBUG_MODE


def test_basic_functionality():
    """Alapvet≈ë funkci√≥k tesztel√©se"""
    print("="*60)
    print("üß™ ENVIRONMENT TESZT - Alapvet≈ë funkci√≥k")
    print("="*60 + "\n")
    
    try:
        # Environment l√©trehoz√°s
        print("1Ô∏è‚É£  Environment l√©trehoz√°sa...")
        env = ROKEnvironment()
        print("‚úÖ Sikeres\n")
        
        # Reset
        print("2Ô∏è‚É£  Reset teszt...")
        state = env.reset()
        print(f"‚úÖ State shape: {state.shape}\n")
        
        # Random akci√≥k
        print("3Ô∏è‚É£  Random akci√≥k v√©grehajt√°sa (10 l√©p√©s)...")
        for i in range(10):
            action = np.random.randint(0, env.action_space_size)
            next_state, reward, done, info = env.step(action)
            
            print(f"   Step {i+1}: Action={action:2d}, Reward={reward:+.3f}, Done={done}")
            
            if done:
                print("   ‚ö†Ô∏è  Epiz√≥d v√©get √©rt")
                break
            
            time.sleep(0.5)
        
        print("\n‚úÖ Random akci√≥k sikeres\n")
        
        # Statistics
        print("4Ô∏è‚É£  Statisztik√°k...")
        stats = env.get_episode_statistics()
        print(f"   Episode: {stats['episode']}")
        print(f"   Steps: {stats['steps']}")
        print(f"   Total Reward: {stats['total_reward']:.3f}")
        print("‚úÖ Sikeres\n")
        
        # Close
        print("5Ô∏è‚É£  Environment bez√°r√°sa...")
        env.close()
        print("‚úÖ Sikeres\n")
        
        print("="*60)
        print("‚úÖ MINDEN TESZT SIKERES")
        print("="*60)
        
        return True
    
    except Exception as e:
        print(f"\n‚ùå TESZT HIBA: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_template_detection():
    """Template felismer√©s tesztel√©se"""
    print("\n" + "="*60)
    print("üñºÔ∏è  TEMPLATE DETECTION TESZT")
    print("="*60 + "\n")
    
    from core.window_manager import WindowManager
    from core.image_manager import ImageManager
    from config.settings import TEMPLATES_DIR
    
    wm = WindowManager()
    if not wm.find_window():
        print("‚ùå J√°t√©k ablak nem tal√°lhat√≥!")
        return False
    
    wm.focus_window()
    im = ImageManager(wm)
    
    # Tesztelend≈ë templatek
    templates = [
        'ui/train_button.png',
        'ui/zzzz_icon.png',
        'buildings/barracks_icon.png',
        'tiers/tier_t1.png'
    ]
    
    print("Keres√©s a k√∂vetkez≈ë templatekre:\n")
    
    found_count = 0
    for template in templates:
        template_path = TEMPLATES_DIR / template
        
        if not template_path.exists():
            print(f"‚ö†Ô∏è  {template} - NEM L√âTEZIK")
            continue
        
        coords = im.find_template(template)
        
        if coords:
            print(f"‚úÖ {template:30s} -> ({coords[0]:4d}, {coords[1]:4d})")
            found_count += 1
        else:
            print(f"‚ùå {template:30s} -> Nem tal√°lhat√≥")
    
    print(f"\nüìä Tal√°lat: {found_count}/{len(templates)}")
    print("="*60)
    
    return found_count > 0


def test_reward_system():
    """Reward rendszer tesztel√©se"""
    print("\n" + "="*60)
    print("üéÅ REWARD SYSTEM TESZT")
    print("="*60 + "\n")
    
    from core.window_manager import WindowManager
    from core.image_manager import ImageManager
    from environment.reward_manager import RewardManager
    
    wm = WindowManager()
    wm.find_window()
    im = ImageManager(wm)
    rm = RewardManager(im)
    
    # Dummy states
    print("Dummy √°llapotok l√©trehoz√°sa...")
    state1 = {'screenshot': im.screenshot()}
    time.sleep(1)
    state2 = {'screenshot': im.screenshot()}
    
    # Reward sz√°m√≠t√°s
    action = {'type': 'click', 'name': 'test_action'}
    reward, breakdown = rm.calculate_reward(state2, action)
    
    print(f"\nReward: {reward:+.3f}")
    if breakdown:
        print("Breakdown:")
        for key, value in breakdown.items():
            print(f"  {key:30s}: {value:+.3f}")
    else:
        print("Nincs reward breakdown (norm√°lis teszt k√∂zben)")
    
    print("\n‚úÖ Reward system m≈±k√∂dik")
    print("="*60)
    
    return True


def interactive_test():
    """Interakt√≠v teszt m√≥d"""
    print("\n" + "="*60)
    print("üéÆ INTERAKT√çV TESZT M√ìD")
    print("="*60)
    
    env = ROKEnvironment()
    state = env.reset()
    
    print("\nEl√©rhet≈ë akci√≥k:")
    from config.settings import ACTIONS
    for action_id, action_data in ACTIONS.items():
        print(f"  {action_id:2d}: {action_data.get('name', 'unknown')}")
    
    print("\n√çrd be az akci√≥ ID-t (vagy 'q' a kil√©p√©shez):")
    
    while True:
        user_input = input("\nAkci√≥ ID: ").strip()
        
        if user_input.lower() == 'q':
            break
        
        try:
            action_id = int(user_input)
            
            if action_id not in ACTIONS:
                print(f"‚ùå √ârv√©nytelen akci√≥ ID: {action_id}")
                continue
            
            # V√©grehajt√°s
            next_state, reward, done, info = env.step(action_id)
            
            print(f"\n{'='*40}")
            print(f"Akci√≥: {ACTIONS[action_id].get('name')}")
            print(f"Reward: {reward:+.3f}")
            print(f"Done: {done}")
            if info.get('reward_breakdown'):
                print("Reward breakdown:")
                for k, v in info['reward_breakdown'].items():
                    print(f"  {k}: {v:+.3f}")
            print(f"{'='*40}")
            
            if done:
                print("\n‚ö†Ô∏è  Epiz√≥d v√©get √©rt, reset...")
                state = env.reset()
        
        except ValueError:
            print("‚ùå √ârv√©nytelen input!")
    
    env.close()
    print("\nüëã Interakt√≠v teszt befejezve")


def main():
    """Main menu"""
    print("\nüß™ ROK RL AGENT - TESZT SUITE\n")
    print("V√°lassz teszt m√≥dot:")
    print("  1. Alapvet≈ë funkci√≥k (gyors)")
    print("  2. Template detection")
    print("  3. Reward system")
    print("  4. Interakt√≠v teszt")
    print("  5. Minden teszt futtat√°sa")
    
    choice = input("\nV√°laszt√°s (1-5): ").strip()
    
    if choice == '1':
        test_basic_functionality()
    elif choice == '2':
        test_template_detection()
    elif choice == '3':
        test_reward_system()
    elif choice == '4':
        interactive_test()
    elif choice == '5':
        test_basic_functionality()
        test_template_detection()
        test_reward_system()
    else:
        print("‚ùå √ârv√©nytelen v√°laszt√°s!")


if __name__ == "__main__":
    main()
"""
Ablakkezel√©s - j√°t√©k ablak detekt√°l√°s √©s f√≥kusz√°l√°s
"""
import time
import ctypes
import win32gui
import win32con
import win32api
from typing import Optional, Tuple

# DPI awareness
try:
    ctypes.windll.shcore.SetProcessDpiAwareness(2)
except:
    try:
        ctypes.windll.user32.SetProcessDPIAware()
    except:
        pass


class WindowManager:
    """J√°t√©k ablak kezel√©se"""
    
    def __init__(self, window_title_hint: str = ""):
        self.window_handle = None
        self.window_title = None
        self.window_title_hint = window_title_hint
        
    def find_window(self, partial_title: str = None) -> bool:
        """
        J√°t√©k ablak keres√©se
        
        Args:
            partial_title: Ablak c√≠m r√©sze (pl. "BlueStacks")
            
        Returns:
            bool: Siker√ºlt-e megtal√°lni az ablakot
        """
        if partial_title is None:
            partial_title = self.window_title_hint
            
        windows = self._enumerate_windows()
        
        # Automatikus keres√©s
        for hwnd, title in windows:
            if partial_title.lower() in title.lower():
                self.window_handle = hwnd
                self.window_title = title
                print(f"‚úÖ J√°t√©k ablak megtal√°lva: {title}")
                return True
        
        # Manu√°lis kiv√°laszt√°s
        print("\nüîç El√©rhet≈ë ablakok:")
        for i, (hwnd, title) in enumerate(windows):
            print(f"  {i + 1}. {title}")
        
        try:
            choice = input("\nV√°lassz ablak sz√°mot (vagy Enter a kil√©p√©shez): ").strip()
            if not choice:
                return False
                
            idx = int(choice) - 1
            if 0 <= idx < len(windows):
                self.window_handle = windows[idx][0]
                self.window_title = windows[idx][1]
                print(f"‚úÖ Kiv√°lasztva: {self.window_title}")
                return True
        except ValueError:
            pass
        
        print("‚ùå Nem tal√°lhat√≥ a j√°t√©k ablak!")
        return False
    
    def focus_window(self) -> bool:
        """F√≥kusz a j√°t√©k ablakra"""
        if not self.window_handle:
            print("‚ö†Ô∏è Nincs be√°ll√≠tva ablak handle!")
            return False
        
        try:
            # Vissza√°ll√≠t√°s minimaliz√°ltb√≥l
            win32gui.ShowWindow(self.window_handle, win32con.SW_RESTORE)
            time.sleep(0.1)
            
            # El≈ët√©rbe hoz√°s
            win32gui.SetForegroundWindow(self.window_handle)
            time.sleep(0.1)
            
            return True
        except Exception as e:
            print(f"‚ùå Ablak f√≥kusz√°l√°s hiba: {e}")
            return False
    
    def get_window_rect(self) -> Optional[Tuple[int, int, int, int]]:
        """
        Ablak poz√≠ci√≥ √©s m√©ret lek√©rdez√©se
        
        Returns:
            (x, y, width, height) vagy None
        """
        if not self.window_handle:
            return None
        
        try:
            rect = win32gui.GetWindowRect(self.window_handle)
            x, y, right, bottom = rect
            return (x, y, right - x, bottom - y)
        except Exception as e:
            print(f"‚ùå Ablak m√©ret lek√©rdez√©s hiba: {e}")
            return None
    
    def get_client_rect(self) -> Optional[Tuple[int, int, int, int]]:
        """
        Ablak bels≈ë (client) ter√ºlet√©nek m√©rete
        """
        if not self.window_handle:
            return None
        
        try:
            rect = win32gui.GetClientRect(self.window_handle)
            return rect
        except Exception as e:
            print(f"‚ùå Client rect hiba: {e}")
            return None
    
    def is_window_visible(self) -> bool:
        """Ablak l√°that√≥-e"""
        if not self.window_handle:
            return False
        return win32gui.IsWindowVisible(self.window_handle)
    
    def is_window_foreground(self) -> bool:
        """Ablak el≈ët√©rben van-e"""
        if not self.window_handle:
            return False
        return win32gui.GetForegroundWindow() == self.window_handle
    
    def _enumerate_windows(self) -> list:
        """√ñsszes l√°that√≥ ablak list√°z√°sa"""
        windows = []
        
        def callback(hwnd, extra):
            if win32gui.IsWindowVisible(hwnd):
                title = win32gui.GetWindowText(hwnd)
                if title:  # Csak n√©vvel rendelkez≈ë ablakok
                    windows.append((hwnd, title))
            return True
        
        win32gui.EnumWindows(callback, None)
        return windows
    
    def __repr__(self):
        if self.window_handle:
            rect = self.get_window_rect()
            return f"<WindowManager: {self.window_title} @ {rect}>"
        return "<WindowManager: No window>"


# Glob√°lis instance (singleton pattern)
_window_manager_instance = None

def get_window_manager(window_title_hint: str = "") -> WindowManager:
    """Glob√°lis WindowManager lek√©r√©se (singleton)"""
    global _window_manager_instance
    if _window_manager_instance is None:
        _window_manager_instance = WindowManager(window_title_hint)
    return _window_manager_instance


if __name__ == "__main__":
    # Teszt
    wm = WindowManager()
    if wm.find_window("BlueStacks"):
        wm.focus_window()
        print(f"Ablak m√©ret: {wm.get_window_rect()}")
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Template K√©sz√≠t≈ë Script
Seg√≠t √∫j template-ek l√©trehoz√°s√°ban a j√°t√©kb√≥l.
Futtat√°s: python template_creator.py
"""

import os
import sys
import time
import pyautogui

# Library hozz√°ad√°sa
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import library as lib


def create_all_templates():
    """Minden farm t√≠pushoz k√©sz√≠t template-eket"""
    print("üéØ TEMPLATE K√âSZ√çT≈ê MASTER SCRIPT")
    print("=" * 50)
    print("Ez a script seg√≠t template-eket k√©sz√≠teni minden farm t√≠pushoz.")
    print("Minden farm t√≠pusn√°l k√ºl√∂nb√∂z≈ë m√©ret≈± template-eket hoz l√©tre.")
    print("\nL√âP√âSEK:")
    print("1. Nyisd meg a j√°t√©kot")
    print("2. Menj a farm n√©zetre ahol l√°that√≥k a farmok")
    print("3. A script k√©ri hogy vidd az egeret a farmra")
    print("4. ENTER-rel meger≈ës√≠tve screenshot k√©sz√ºl")
    print("5. Ism√©teld meg minden farm t√≠pussal")

    input("\nNyomj ENTER-t ha k√©szen √°llsz...")

    farm_types = {
        "1": "stone_farm",
        "2": "wheat_farm",
        "3": "gold_farm",
        "4": "wood_farm",
        "5": "information_icon"  # Information ikon is kell
    }

    images_folder = "../images/"
    os.makedirs(images_folder, exist_ok=True)

    completed = []

    while len(completed) < len(farm_types):
        print(f"\n{'=' * 50}")
        print("FARM T√çPUSOK:")
        for key, farm in farm_types.items():
            status = "‚úÖ K√âSZ" if farm in completed else "‚ùå NINCS"
            print(f"  {key}. {farm:<20} {status}")
        print("  s. √Ållapot ellen≈ërz√©s")
        print("  q. Kil√©p√©s")

        choice = input(f"\nV√°lassz farm t√≠pust ({len(completed)}/{len(farm_types)} k√©sz): ").strip()

        if choice.lower() == 'q':
            break
        elif choice.lower() == 's':
            check_existing_templates()
            continue
        elif choice in farm_types:
            farm_name = farm_types[choice]

            if farm_name in completed:
                print(f"‚úÖ {farm_name} m√°r elk√©sz√ºlt!")
                continue

            print(f"\nüéØ {farm_name.upper()} TEMPLATE K√âSZ√çT√âSE")
            print("-" * 30)
            print("1. Vidd az egeret a farm/ikon k√∂zep√©re")
            print("2. V√°rd meg az 5 m√°sodperces visszasz√°ml√°l√°st")
            print("3. Tartsd mozdulatlanul az egeret!")

            try:
                # Visszasz√°ml√°l√°s
                for i in range(5, 0, -1):
                    print(f"‚è±Ô∏è  {i} m√°sodperc...")
                    time.sleep(1)

                pos = pyautogui.position()
                print(f"üìç Screenshot poz√≠ci√≥: {pos}")

                # T√∂bb m√©ret≈± template k√©sz√≠t√©se
                sizes = [40, 60, 80, 100, 120]
                success_count = 0

                for size in sizes:
                    try:
                        half_size = size // 2
                        region = (pos.x - half_size, pos.y - half_size, size, size)

                        # Ellen≈ërizz√ºk hogy a r√©gi√≥ nem megy ki a k√©perny≈ër≈ël
                        screen_size = pyautogui.size()
                        if (region[0] < 0 or region[1] < 0 or
                                region[0] + region[2] > screen_size.width or
                                region[1] + region[3] > screen_size.height):
                            print(f"   ‚ö†Ô∏è  {size}x{size}: K√©perny≈ën k√≠v√ºl esne")
                            continue

                        screenshot = pyautogui.screenshot(region=region)
                        filename = f"{farm_name}_{size}x{size}.png"
                        filepath = os.path.join(images_folder, filename)

                        screenshot.save(filepath)
                        print(f"   ‚úÖ {filename}")
                        success_count += 1

                    except Exception as e:
                        print(f"   ‚ùå {size}x{size}: {e}")

                if success_count > 0:
                    print(f"üéâ {farm_name}: {success_count} template sikeresen l√©trehozva!")
                    completed.append(farm_name)

                    # Opcion√°lisan k√©sz√≠t√ºnk egy "a", "b", "c" verzi√≥t is
                    create_variants = input("K√©sz√≠tsek vari√°ns template-eket is? (y/N): ").strip().lower()
                    if create_variants in ['y', 'yes']:
                        create_variant_templates(farm_name, pos, images_folder)
                else:
                    print(f"‚ùå {farm_name}: Nem siker√ºlt template-et k√©sz√≠teni!")

            except Exception as e:
                print(f"‚ùå Hiba t√∂rt√©nt {farm_name} k√©sz√≠t√©se k√∂zben: {e}")

        else:
            print("‚ùå √ârv√©nytelen v√°laszt√°s!")

    # √ñsszefoglal√≥
    print(f"\n{'=' * 50}")
    print("üèÅ TEMPLATE K√âSZ√çT√âS BEFEJEZVE")
    print(f"‚úÖ Elk√©sz√ºlt: {len(completed)} / {len(farm_types)}")
    for farm in completed:
        print(f"   ‚úÖ {farm}")

    missing = [farm for farm in farm_types.values() if farm not in completed]
    if missing:
        print(f"‚ùå Hi√°nyzik: {len(missing)}")
        for farm in missing:
            print(f"   ‚ùå {farm}")

    print(f"\nüìÅ Template-ek helye: {os.path.abspath(images_folder)}")
    print("üöÄ Most m√°r futtathatod a gathering_script.py-t!")


def create_variant_templates(farm_name, center_pos, images_folder):
    """Vari√°ns template-ek k√©sz√≠t√©se (a, b, c verzi√≥k)"""
    print(f"\nüîÑ Vari√°ns template-ek k√©sz√≠t√©se {farm_name}-hez...")

    # Kis elt√©r√©sekkel k√©sz√≠t√ºnk template-eket
    variants = [
        ("a", -10, -5),  # Balra-fel
        ("b", 10, -5),  # Jobbra-fel
        ("c", 0, 10),  # K√∂z√©pen-le
    ]

    for variant_name, dx, dy in variants:
        try:
            new_pos = pyautogui.Point(center_pos.x + dx, center_pos.y + dy)

            # 80x80-as template k√©sz√≠t√©se
            region = (new_pos.x - 40, new_pos.y - 40, 80, 80)

            # K√©perny≈ë boundary ellen≈ërz√©s
            screen_size = pyautogui.size()
            if (region[0] >= 0 and region[1] >= 0 and
                    region[0] + region[2] <= screen_size.width and
                    region[1] + region[3] <= screen_size.height):

                screenshot = pyautogui.screenshot(region=region)
                filename = f"{farm_name}_{variant_name}.png"
                filepath = os.path.join(images_folder, filename)
                screenshot.save(filepath)
                print(f"   ‚úÖ {filename}")
            else:
                print(f"   ‚ö†Ô∏è  {variant_name}: K√©perny≈ën k√≠v√ºl")

        except Exception as e:
            print(f"   ‚ùå {variant_name}: {e}")


def check_existing_templates():
    """Megl√©v≈ë template-ek ellen≈ërz√©se"""
    print("\nüìã MEGL√âV≈ê TEMPLATE-EK ELLEN≈êRZ√âSE")
    print("-" * 40)

    images_folder = "../images/"
    farm_types = ["stone_farm", "wheat_farm", "gold_farm", "wood_farm", "information_icon"]

    for farm_name in farm_types:
        templates = lib.find_template_files(farm_name, images_folder)
        if templates:
            print(f"‚úÖ {farm_name}: {len(templates)} template")
            for template in templates:
                size = os.path.getsize(template)
                print(f"   üìÑ {os.path.basename(template)} ({size} bytes)")
        else:
            print(f"‚ùå {farm_name}: Nincs template")


def quick_single_template():
    """Gyors egyszeri template k√©sz√≠t√©s"""
    print("\n‚ö° GYORS TEMPLATE K√âSZ√çT√âS")
    print("Vidd az egeret a k√≠v√°nt helyre √©s nyomj ENTER-t!")

    farm_name = input("Farm n√©v (pl. stone_farm_extra): ").strip()
    if not farm_name:
        print("‚ùå √ârv√©nytelen n√©v!")
        return

    input("Nyomj ENTER-t amikor az eg√©r a megfelel≈ë helyen van...")

    pos = pyautogui.position()
    region = (pos.x - 40, pos.y - 40, 80, 80)

    try:
        screenshot = pyautogui.screenshot(region=region)
        filename = f"{farm_name}.png"
        filepath = os.path.join("../images/", filename)

        os.makedirs("../images/", exist_ok=True)
        screenshot.save(filepath)
        print(f"‚úÖ Mentve: {filename}")

    except Exception as e:
        print(f"‚ùå Hiba: {e}")


def batch_template_creator():
    """Batch m√≥d√∫ template k√©sz√≠t√©s - egyszer≈±bb verzi√≥"""
    print("\nüî• BATCH TEMPLATE K√âSZ√çT≈ê")
    print("=" * 40)
    print("Egyszer≈±s√≠tett verzi√≥ minden farm t√≠pushoz!")
    print("\nMinden farmn√°l:")
    print("1. Vidd az egeret a farm f√∂l√©")
    print("2. Nyomj SPACE-t")
    print("3. Folytasd a k√∂vetkez≈ë farmmal")
    print("4. ESC a kil√©p√©shez")

    farm_types = ["stone_farm", "wheat_farm", "gold_farm", "wood_farm", "information_icon"]
    images_folder = "../images/"
    os.makedirs(images_folder, exist_ok=True)

    current_farm = 0

    print(f"\nüéØ Kezd√©s: {farm_types[current_farm].upper()}")
    print("Vidd az egeret a farm f√∂l√© √©s nyomj SPACE-t!")

    while current_farm < len(farm_types):
        try:
            # V√°runk egy billenty≈±re
            key = input("SPACE = screenshot, ESC = kil√©p√©s, ENTER = k√∂vetkez≈ë: ").strip().lower()

            if key == '' or key == 'space' or key == ' ':
                # Screenshot k√©sz√≠t√©s
                farm_name = farm_types[current_farm]
                pos = pyautogui.position()

                # 80x80-as template
                region = (pos.x - 40, pos.y - 40, 80, 80)
                screenshot = pyautogui.screenshot(region=region)
                filename = f"{farm_name}.png"
                filepath = os.path.join(images_folder, filename)
                screenshot.save(filepath)

                print(f"‚úÖ {filename} mentve @ {pos}")

                # K√∂vetkez≈ë farm
                current_farm += 1
                if current_farm < len(farm_types):
                    print(f"\nüéØ K√∂vetkez≈ë: {farm_types[current_farm].upper()}")
                    print("Vidd az egeret a farm f√∂l√© √©s nyomj SPACE-t!")
                else:
                    print("\nüéâ Minden template elk√©sz√ºlt!")
                    break

            elif key == 'esc' or key == 'escape' or key == 'q':
                print("üëã Kil√©p√©s...")
                break

        except KeyboardInterrupt:
            print("\nüëã Megszak√≠tva...")
            break
        except Exception as e:
            print(f"‚ùå Hiba: {e}")

    print(f"\nüìÅ Template-ek helye: {os.path.abspath(images_folder)}")


if __name__ == "__main__":
    # PyAutoGUI be√°ll√≠t√°sok
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.1

    print("üéØ TEMPLATE K√âSZ√çT≈ê SEG√âDPROGRAM")
    print("=" * 40)
    print("1. Teljes template k√©sz√≠t√©s (r√©szletes)")
    print("2. Batch template k√©sz√≠t√©s (gyors)")
    print("3. Megl√©v≈ë template-ek ellen≈ërz√©se")
    print("4. Gyors egyedi template")
    print("5. Kil√©p√©s")

    while True:
        choice = input("\nV√°laszt√°s (1-5): ").strip()

        if choice == "1":
            create_all_templates()
            break
        elif choice == "2":
            batch_template_creator()
            break
        elif choice == "3":
            check_existing_templates()
        elif choice == "4":
            quick_single_template()
        elif choice == "5":
            print("üëã Kil√©p√©s...")
            break
        else:
            print("‚ùå √ârv√©nytelen v√°laszt√°s!")
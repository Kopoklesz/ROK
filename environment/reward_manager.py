"""
Reward Manager - Jutalom sz√°m√≠t√°s √©s detekt√°l√°s
"""
import time
import numpy as np
from typing import Dict, Optional, Tuple

from config.settings import REWARD_WEIGHTS, DEBUG_MODE


class RewardManager:
    """K√∂zponti reward sz√°m√≠t√°s"""
    
    def __init__(self, image_manager):
        self.image_mgr = image_manager
        
        # √Ållapot tracking
        self.prev_state = None
        self.prev_screenshot = None
        self.last_action_time = time.time()
        self.prev_power = 0
        self.prev_queue_count = 0
        
        # Reward weights (config-b√≥l)
        self.rewards = REWARD_WEIGHTS.copy()
        
        # Statisztik√°k
        self.total_rewards = 0.0
        self.reward_breakdown = {key: 0.0 for key in self.rewards}
    
    def calculate_reward(self, current_state: Dict, action: Dict) -> Tuple[float, Dict]:
        """
        Teljes reward sz√°m√≠t√°s
        
        Args:
            current_state: Jelenlegi √°llapot dict
            action: V√©grehajtott akci√≥ dict
            
        Returns:
            (reward_value, breakdown_dict)
        """
        total_reward = 0.0
        breakdown = {}
        
        # Els≈ë fut√°s inicializ√°l√°s
        if self.prev_state is None:
            self.prev_state = current_state
            self.prev_screenshot = current_state.get('screenshot')
            return 0.0, {}
        
        # ===== POZIT√çV REWARD-OK =====
        
        # 1. Barakk / √©p√ºlet megnyit√°sa
        if self._detect_building_opened(current_state):
            reward = self.rewards['barracks_opened']
            total_reward += reward
            breakdown['barracks_opened'] = reward
        
        # 2. Train men√º megnyit√°sa
        if self._detect_train_menu_opened(current_state):
            reward = self.rewards['train_menu_opened']
            total_reward += reward
            breakdown['train_menu_opened'] = reward
        
        # 3. Tier v√°laszt√°s
        if self._detect_tier_selected(self.prev_state, current_state):
            reward = self.rewards['tier_selected']
            total_reward += reward
            breakdown['tier_selected'] = reward
        
        # 4. Mennyis√©g be√°ll√≠t√°s
        if self._detect_quantity_changed(self.prev_state, current_state):
            reward = self.rewards['quantity_set']
            total_reward += reward
            breakdown['quantity_set'] = reward
        
        # 5. Train gomb kattint√°s
        if self._detect_train_button_clicked(self.prev_state, current_state):
            reward = self.rewards['train_button_clicked']
            total_reward += reward
            breakdown['train_button_clicked'] = reward
        
        # 6. F≈ê JUTALOM - K√©pz√©s elindult
        if self._detect_training_started(self.prev_state, current_state):
            reward = self.rewards['training_started']
            total_reward += reward
            breakdown['training_started'] = reward
        
        # 7. Power n√∂veked√©s
        power_increase = self._detect_power_increase(current_state)
        if power_increase > 0:
            reward = self.rewards['power_increased'] * (power_increase / 1000.0)
            total_reward += reward
            breakdown['power_increased'] = reward
        
        # ===== NEGAT√çV REWARD-OK =====
        
        # 8. Felesleges kattint√°s (nincs v√°ltoz√°s)
        if action and action.get('type') == 'click':
            if not self._detect_state_changed(self.prev_state, current_state):
                reward = self.rewards['wasted_click']
                total_reward += reward
                breakdown['wasted_click'] = reward
        
        # 9. T√∫l hossz√∫ inaktivit√°s
        if self._detect_idle_too_long():
            reward = self.rewards['idle_too_long']
            total_reward += reward
            breakdown['idle_too_long'] = reward
        
        # 10. Foglalt queue-ba pr√≥b√°lt k√©pezni
        if self._detect_queue_busy_attempt(action, current_state):
            reward = self.rewards['queue_busy_attempt']
            total_reward += reward
            breakdown['queue_busy_attempt'] = reward
        
        # 11. Er≈ëforr√°s kifogy√°s
        if self._detect_resource_depleted(current_state):
            reward = self.rewards['resource_depleted']
            total_reward += reward
            breakdown['resource_depleted'] = reward
        
        # Statisztika friss√≠t√©s
        self.total_rewards += total_reward
        for key, value in breakdown.items():
            self.reward_breakdown[key] += value
        
        # Log
        if DEBUG_MODE and breakdown:
            self._log_reward(total_reward, breakdown)
        
        # √Ållapot ment√©s
        self.prev_state = current_state
        self.prev_screenshot = current_state.get('screenshot')
        self.last_action_time = time.time()
        
        return total_reward, breakdown
    
    # ===== DETEKTOROK =====
    
    def _detect_building_opened(self, state: Dict) -> bool:
        """√âp√ºlet men√º megnyit√°sa"""
        # Keres√©s men√º header-re
        coords = self.image_mgr.find_template('ui/train_menu_header.png')
        return coords is not None
    
    def _detect_train_menu_opened(self, state: Dict) -> bool:
        """Train lista megnyit√°sa"""
        # Tier ikonok l√°that√≥k?
        tier_count = 0
        for tier in ['t1', 't2', 't3', 't4', 't5']:
            if self.image_mgr.find_template(f'tiers/tier_{tier}.png'):
                tier_count += 1
        
        return tier_count >= 2
    
    def _detect_tier_selected(self, prev_state: Dict, curr_state: Dict) -> bool:
        """Tier kiv√°laszt√°s detekt√°l√°s"""
        # Quantity slider megjelent?
        slider = self.image_mgr.find_template('ui/quantity_slider.png')
        train_btn = self.image_mgr.find_template('ui/train_button.png')
        
        return slider is not None or train_btn is not None
    
    def _detect_quantity_changed(self, prev_state: Dict, curr_state: Dict) -> bool:
        """Mennyis√©g v√°ltoz√°s (OCR alap√∫)"""
        # TODO: Implement√°lni OCR-rel a quantity mez≈ë olvas√°s√°t
        # Egyenl≈ëre egyszer≈±s√≠tett verzi√≥
        return False
    
    def _detect_train_button_clicked(self, prev_state: Dict, curr_state: Dict) -> bool:
        """Train gomb kattint√°s"""
        # Train gomb elt≈±nt?
        prev_btn = self.image_mgr.find_template('ui/train_button.png', 
                                               prev_state.get('screenshot'))
        curr_btn = self.image_mgr.find_template('ui/train_button.png',
                                               curr_state.get('screenshot'))
        
        if prev_btn and not curr_btn:
            return True
        
        # Confirm popup megjelent?
        confirm = self.image_mgr.find_template('ui/confirm_button.png')
        return confirm is not None
    
    def _detect_training_started(self, prev_state: Dict, curr_state: Dict) -> bool:
        """
        F≈ê JUTALOM - K√©pz√©s sikeresen elindult
        """
        # Zzzz ikon megjelent
        zzzz = self.image_mgr.find_template('ui/zzzz_icon.png')
        if zzzz:
            return True
        
        # Training progress bar
        progress = self.image_mgr.find_template('ui/training_progress.png')
        if progress:
            return True
        
        return False
    
    def _detect_power_increase(self, state: Dict) -> int:
        """
        Power n√∂veked√©s detekt√°l√°s (OCR)
        
        Returns:
            N√∂veked√©s m√©rt√©ke (int)
        """
        # TODO: Implement√°lni OCR-rel
        # Egyenl≈ëre dummy
        return 0
    
    def _detect_state_changed(self, prev_state: Dict, curr_state: Dict) -> bool:
        """
        √Ållapot v√°ltoz√°s detekt√°l√°s (k√©perny≈ë diff)
        """
        prev_screen = prev_state.get('screenshot')
        curr_screen = curr_state.get('screenshot')
        
        if prev_screen is None or curr_screen is None:
            return False
        
        diff = self.image_mgr.compare_screenshots(prev_screen, curr_screen)
        
        # Threshold: ha v√°ltoz√°s > 1% pixel
        threshold = prev_screen.size * 0.01
        return diff > threshold
    
    def _detect_idle_too_long(self, max_idle: float = 30.0) -> bool:
        """T√∫l hossz√∫ inaktivit√°s"""
        idle_time = time.time() - self.last_action_time
        return idle_time > max_idle
    
    def _detect_queue_busy_attempt(self, action: Dict, state: Dict) -> bool:
        """
        Pr√≥b√°lt k√©pezni foglalt queue mellett
        """
        if not action or action.get('name') != 'click_train_button':
            return False
        
        # Zzzz ikon l√°that√≥ (queue busy)
        zzzz = self.image_mgr.find_template('ui/zzzz_icon.png')
        return zzzz is not None
    
    def _detect_resource_depleted(self, state: Dict) -> bool:
        """
        Er≈ëforr√°s kifogyott
        """
        # TODO: Implement√°lni OCR-rel az er≈ëforr√°s √©rt√©kek olvas√°s√°t
        # Egyenl≈ëre dummy
        return False
    
    def _log_reward(self, total: float, breakdown: Dict):
        """Reward log ki√≠r√°sa"""
        print(f"\n{'='*60}")
        print(f"üéÅ REWARD: {total:+.3f}")
        print(f"{'='*60}")
        for key, value in breakdown.items():
            emoji = "‚úÖ" if value > 0 else "‚ùå"
            print(f"  {emoji} {key:.<40} {value:+.3f}")
        print(f"{'='*60}\n")
    
    def get_statistics(self) -> Dict:
        """Reward statisztik√°k"""
        return {
            'total_rewards': self.total_rewards,
            'breakdown': self.reward_breakdown.copy()
        }
    
    def reset(self):
        """Reward manager reset"""
        self.prev_state = None
        self.prev_screenshot = None
        self.last_action_time = time.time()
        self.total_rewards = 0.0
        self.reward_breakdown = {key: 0.0 for key in self.rewards}


if __name__ == "__main__":
    # Teszt
    from core.window_manager import WindowManager
    from core.image_manager import ImageManager
    
    wm = WindowManager()
    wm.find_window("BlueStacks")
    
    im = ImageManager(wm)
    rm = RewardManager(im)
    
    # Dummy state
    state1 = {'screenshot': im.screenshot()}
    state2 = {'screenshot': im.screenshot()}
    
    action = {'type': 'click', 'name': 'test'}
    
    reward, breakdown = rm.calculate_reward(state2, action)
    print(f"Reward: {reward}, Breakdown: {breakdown}")
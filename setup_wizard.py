"""
ROK Auto Farm - Setup Wizard
Teljes setup var√°zsl√≥ - els≈ë haszn√°lat
"""
import json
import cv2
import numpy as np
from pathlib import Path
from PIL import ImageGrab

from library import initialize_game_window
from utils.region_selector import RegionSelector
from utils.coordinate_helper import CoordinateHelper
from pynput import mouse, keyboard


class SetupWizard:
    """Setup var√°zsl√≥ - minden be√°ll√≠t√°s"""
    
    def __init__(self):
        self.config_dir = Path(__file__).parent / 'config'
        self.images_dir = Path(__file__).parent / 'images'
        
        # K√∂nyvt√°rak l√©trehoz√°sa
        self.config_dir.mkdir(exist_ok=True)
        self.images_dir.mkdir(exist_ok=True)
        
        self.selector = RegionSelector()
        self.current_coords = []
    
    def run(self):
        """Teljes setup folyamat"""
        print("="*60)
        print("üßô ROK AUTO FARM - SETUP WIZARD")
        print("="*60)
        print("\nEz a var√°zsl√≥ v√©gigvezet minden be√°ll√≠t√°son.")
        print("Az els≈ë haszn√°lat ut√°n m√°r nem kell futtatni!\n")
        print("="*60)
        
        input("\nNyomj ENTER-t a folytat√°shoz...")
        
        # 1. Er≈ëforr√°s r√©gi√≥k
        print("\n" + "="*60)
        print("1Ô∏è‚É£  ER≈êFORR√ÅS SZ√ÅML√ÅL√ìK BE√ÅLL√çT√ÅSA")
        print("="*60)
        farm_regions = self.setup_farm_regions()
        
        # 2. Id≈ë r√©gi√≥k
        print("\n" + "="*60)
        print("2Ô∏è‚É£  ID≈ê R√âGI√ìK BE√ÅLL√çT√ÅSA")
        print("="*60)
        time_regions = self.setup_time_regions()
        
        # 3. Farm koordin√°t√°k
        print("\n" + "="*60)
        print("3Ô∏è‚É£  FARM KOORDIN√ÅT√ÅK BE√ÅLL√çT√ÅSA")
        print("="*60)
        farm_coords = self.setup_farm_coordinates(farm_regions)
        
        # 4. Gather.png template
        print("\n" + "="*60)
        print("4Ô∏è‚É£  GATHER GOMB TEMPLATE MENT√âSE")
        print("="*60)
        self.setup_gather_template()
        
        # 5. Settings l√©trehoz√°sa
        print("\n" + "="*60)
        print("5Ô∏è‚É£  ALAP√âRTELMEZETT BE√ÅLL√çT√ÅSOK")
        print("="*60)
        self.create_default_settings()
        
        # Befejez√©s
        print("\n" + "="*60)
        print("‚úÖ SETUP BEFEJEZVE!")
        print("="*60)
        print("\nMost m√°r futtathatod a farm_manager.py-t:")
        print("  python farm_manager.py")
        print("\n" + "="*60)
    
    def wait_for_enter_or_esc(self, prompt="ENTER = folytat√°s"):
        """V√°r ENTER-re vagy ESC-re"""
        print(f"  {prompt}, ESC = kihagy√°s")
        
        cancelled = [False]
        
        def on_press(key):
            try:
                if key == keyboard.Key.enter:
                    return False  # Stop
                elif key == keyboard.Key.esc:
                    cancelled[0] = True
                    print(f"  ‚èπÔ∏è  ESC - Kihagyva")
                    return False  # Stop
            except:
                pass
        
        listener = keyboard.Listener(on_press=on_press)
        listener.start()
        listener.join()
        
        return not cancelled[0]  # True = ENTER, False = ESC
    
    def setup_farm_regions(self):
        """Er≈ëforr√°s OCR r√©gi√≥k be√°ll√≠t√°sa"""
        print("\nJel√∂ld ki az er≈ëforr√°s sz√°mokat a k√©perny≈ën!")
        print("ESC = megtartja a r√©gi √©rt√©ket (ha van)\n")
        
        resources = ['wheat', 'wood', 'stone', 'gold']
        
        # Megl√©v≈ë r√©gi√≥k bet√∂lt√©se (ha vannak)
        regions_file = self.config_dir / 'farm_regions.json'
        if regions_file.exists():
            try:
                with open(regions_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        regions = json.loads(content)
                    else:
                        regions = {}
                print("‚ÑπÔ∏è  Megl√©v≈ë r√©gi√≥k bet√∂ltve. ESC = r√©gi √©rt√©k megtart√°sa\n")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Hib√°s JSON, √∫j r√©gi√≥k l√©trehoz√°sa...\n")
                regions = {}
        else:
            regions = {}
        
        for resource in resources:
            # R√©gi √©rt√©k ki√≠r√°sa
            old_value = regions.get(resource)
            if old_value:
                print(f"\nüìç {resource.upper()} - Jelenlegi: {old_value}")
            else:
                print(f"\nüìç {resource.upper()} - Nincs be√°ll√≠tva")
            
            # V√°r ENTER-re vagy ESC-re
            if not self.wait_for_enter_or_esc("ENTER = √∫j √©rt√©k"):
                # ESC = r√©gi megtart√°sa
                if old_value:
                    print(f"  ‚ÑπÔ∏è  {resource.upper()} r√©gi √©rt√©k megtartva")
                else:
                    regions[resource] = None
                    print(f"  ‚ö†Ô∏è {resource.upper()} kihagyva")
                continue
            
            region = self.selector.select_region(f"{resource.upper()} sz√°ml√°l√≥")
            
            if region:
                regions[resource] = region
                print(f"  ‚úÖ {resource.upper()} r√©gi√≥ friss√≠tve")
            else:
                if old_value:
                    print(f"  ‚ÑπÔ∏è  {resource.upper()} r√©gi √©rt√©k megtartva")
                else:
                    regions[resource] = None
                    print(f"  ‚ö†Ô∏è {resource.upper()} kihagyva")
        
        # Ment√©s
        with open(regions_file, 'w', encoding='utf-8') as f:
            json.dump(regions, f, indent=2)
        
        print(f"\n‚úÖ Er≈ëforr√°s r√©gi√≥k mentve: {regions_file}")
        return regions
    
    def setup_time_regions(self):
        """Id≈ë OCR r√©gi√≥k be√°ll√≠t√°sa"""
        print("\nJel√∂ld ki az id≈ë megjelen√≠t≈ë ter√ºleteket!")
        print("  - March Time: March id≈ë (els≈ë id≈ë)")
        print("  - Gather Time: Gather id≈ë (m√°sodik id≈ë)")
        print("ESC = megtartja a r√©gi √©rt√©ket (ha van)\n")
        
        # Megl√©v≈ë r√©gi√≥k bet√∂lt√©se
        time_file = self.config_dir / 'time_regions.json'
        if time_file.exists():
            try:
                with open(time_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        time_regions = json.loads(content)
                    else:
                        time_regions = {}
                print("‚ÑπÔ∏è  Megl√©v≈ë id≈ë r√©gi√≥k bet√∂ltve.\n")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Hib√°s JSON, √∫j id≈ë r√©gi√≥k l√©trehoz√°sa...\n")
                time_regions = {}
        else:
            time_regions = {}
        
        # March Time (Id≈ë A)
        old_value_a = time_regions.get('march_time')
        if old_value_a:
            print(f"\nüìç MARCH TIME - Jelenlegi: {old_value_a}")
        else:
            print(f"\nüìç MARCH TIME - Nincs be√°ll√≠tva")
        
        if not self.wait_for_enter_or_esc("ENTER = √∫j √©rt√©k"):
            if old_value_a:
                print(f"  ‚ÑπÔ∏è  March Time r√©gi √©rt√©k megtartva")
            else:
                print(f"  ‚ö†Ô∏è March Time kihagyva")
        else:
            region_a = self.selector.select_region("MARCH TIME")
            if region_a:
                time_regions['march_time'] = region_a
                print(f"  ‚úÖ March Time friss√≠tve")
            else:
                if old_value_a:
                    print(f"  ‚ÑπÔ∏è  March Time r√©gi √©rt√©k megtartva")
                else:
                    print(f"  ‚ö†Ô∏è March Time kihagyva")
        
        # Gather Time (Id≈ë B)
        old_value_b = time_regions.get('gather_time')
        if old_value_b:
            print(f"\nüìç GATHER TIME - Jelenlegi: {old_value_b}")
        else:
            print(f"\nüìç GATHER TIME - Nincs be√°ll√≠tva")
        
        if not self.wait_for_enter_or_esc("ENTER = √∫j √©rt√©k"):
            if old_value_b:
                print(f"  ‚ÑπÔ∏è  Gather Time r√©gi √©rt√©k megtartva")
            else:
                print(f"  ‚ö†Ô∏è Gather Time kihagyva")
        else:
            region_b = self.selector.select_region("GATHER TIME")
            if region_b:
                time_regions['gather_time'] = region_b
                print(f"  ‚úÖ Gather Time friss√≠tve")
            else:
                if old_value_b:
                    print(f"  ‚ÑπÔ∏è  Gather Time r√©gi √©rt√©k megtartva")
                else:
                    print(f"  ‚ö†Ô∏è Gather Time kihagyva")
        
        # Ment√©s
        with open(time_file, 'w', encoding='utf-8') as f:
            json.dump(time_regions, f, indent=2)
        
        print(f"\n‚úÖ Id≈ë r√©gi√≥k mentve: {time_file}")
        return time_regions
    
    def setup_farm_coordinates(self, farm_regions):
        """Farm koordin√°t√°k be√°ll√≠t√°sa"""
        print("\nFarm koordin√°t√°k be√°ll√≠t√°sa kattint√°ssal!")
        print("\nüìã FARM FOLYAMAT (helyes sorrend):")
        print("  1. Nyersanyag ikon")
        print("  2. Szint gomb")
        print("  3. Keres√©s gomb")
        print("  4. ‚ö´ HOLT KATTINT√ÅS (gather helyett - NEM ment≈ëdik)")
        print("  5. √öj egys√©g gomb")
        print("  6. March gomb")
        print("  7. K√©perny≈ë k√∂zepe")
        print("\nESC = kihagy√°s (r√©gi √©rt√©k megtart√°sa)\n")
        
        coord_names = [
            'resource_icon',      # 1. Nyersanyag ikon
            'level_button',       # 2. Szint
            'search_button',      # 3. Keres√©s
            'dead_click',         # 4. HOLT KATTINT√ÅS (NEM ment≈ëdik)
            'new_troops',         # 5. √öj egys√©g
            'march_button',       # 6. March
            'screen_center'       # 7. K√©perny≈ë k√∂zepe
        ]
        
        coord_labels = {
            'resource_icon': 'Nyersanyag ikon',
            'level_button': 'Szint gomb',
            'search_button': 'Keres√©s gomb',
            'dead_click': '‚ö´ HOLT KATTINT√ÅS (gather helyett)',
            'new_troops': '√öj egys√©g gomb',
            'march_button': 'March gomb',
            'screen_center': 'K√©perny≈ë k√∂zepe'
        }
        
        # Megl√©v≈ë koordin√°t√°k bet√∂lt√©se
        coords_file = self.config_dir / 'farm_coords.json'
        if coords_file.exists():
            try:
                with open(coords_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        all_coords = json.loads(content)
                    else:
                        all_coords = {}
                print("‚ÑπÔ∏è  Megl√©v≈ë koordin√°t√°k bet√∂ltve.\n")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Hib√°s JSON, √∫j koordin√°t√°k l√©trehoz√°sa...\n")
                all_coords = {}
        else:
            all_coords = {}
        
        # Csak azokhoz a farmokhoz k√©rj√ºk a koordin√°t√°kat, amikhez van r√©gi√≥
        active_farms = [name for name, region in farm_regions.items() if region is not None]
        
        for farm_type in active_farms:
            print(f"\n{'='*60}")
            print(f"üåæ {farm_type.upper()} FARM KOORDIN√ÅT√ÅK")
            print(f"{'='*60}")
            
            # Megl√©v≈ë koordin√°t√°k a farm t√≠pushoz
            coords = all_coords.get(farm_type)
            if coords is None or not isinstance(coords, dict):
                coords = {}
            
            for coord_name in coord_names:
                label = coord_labels[coord_name]
                
                # Holt kattint√°s jelz√©se
                if coord_name == 'dead_click':
                    print(f"\n‚ö´ {label}")
                    print(f"   ‚ö†Ô∏è  NEM MENT≈êDIK - csak a setup folytonoss√°g√°hoz")
                    print(f"   Kattints b√°rhova a folytat√°shoz...")
                else:
                    old_coord = coords.get(coord_name)
                    
                    if old_coord:
                        print(f"\nüìç {label} - Jelenlegi: {old_coord}")
                    else:
                        print(f"\nüìç {label} - Nincs be√°ll√≠tva")
                    
                    print(f"   Kattints a j√°t√©kban, vagy ESC = r√©gi megtart√°sa")
                
                coord = self.get_single_coordinate()
                
                # Holt kattint√°st NEM mentj√ºk
                if coord_name == 'dead_click':
                    if coord:
                        print(f"   ‚úÖ Holt kattint√°s OK (nem mentve)")
                    else:
                        print(f"   ‚èπÔ∏è  ESC - Kihagyva")
                    continue  # ‚Üê NEM menti el!
                
                # T√∂bbi koordin√°ta norm√°lisan
                if coord and coord != [0, 0]:
                    coords[coord_name] = coord
                    print(f"   ‚úÖ {label} friss√≠tve: {coord}")
                else:
                    if old_coord:
                        print(f"   ‚ÑπÔ∏è  {label} r√©gi √©rt√©k megtartva")
                    else:
                        coords[coord_name] = [0, 0]
                        print(f"   ‚ö†Ô∏è {label} default: [0, 0]")
            
            all_coords[farm_type] = coords
        
        # Ment√©s
        with open(coords_file, 'w', encoding='utf-8') as f:
            json.dump(all_coords, f, indent=2)
        
        print(f"\n‚úÖ Farm koordin√°t√°k mentve: {coords_file}")
        return all_coords
    
    def get_single_coordinate(self):
        """Egyetlen koordin√°ta bek√©r√©se kattint√°ssal"""
        coord = [None]
        cancelled = [False]
        done = [False]
        
        def on_click(x, y, button, pressed):
            if pressed and button == mouse.Button.left:
                coord[0] = [x, y]
                done[0] = True
                print(f"   üñ±Ô∏è Koordin√°ta: ({x}, {y})")
                return False
        
        def on_press(key):
            try:
                if key == keyboard.Key.esc:
                    print(f"   ‚èπÔ∏è  ESC - Kihagyva")
                    cancelled[0] = True
                    done[0] = True
                    return False
            except:
                pass
        
        # Listeners ind√≠t√°sa
        mouse_listener = mouse.Listener(on_click=on_click)
        keyboard_listener = keyboard.Listener(on_press=on_press)
        
        mouse_listener.start()
        keyboard_listener.start()
        
        # V√°rakoz√°s b√°rmelyik befejez√©s√©re
        import time
        while not done[0]:
            time.sleep(0.1)
        
        # Listeners le√°ll√≠t√°sa
        mouse_listener.stop()
        keyboard_listener.stop()
        
        # Ha ESC volt, None-t ad vissza
        if cancelled[0]:
            return None
        
        return coord[0] if coord[0] else [0, 0]
    
    def setup_gather_template(self):
        """Gather.png template ment√©se"""
        print("\nGather gomb template ment√©se!")
        print("‚ö†Ô∏è  FONTOS: A gather gomb RANDOM helyen lehet!")
        print("Ez√©rt NEM koordin√°t√°t, hanem K√âPET ment√ºnk r√≥la.\n")
        
        gather_path = self.images_dir / 'gather.png'
        
        if gather_path.exists():
            print(f"‚ÑπÔ∏è  Megl√©v≈ë gather.png: {gather_path}")
        else:
            print("Nincs megl√©v≈ë gather.png\n")
        
        # V√°r ENTER-re vagy ESC-re
        if not self.wait_for_enter_or_esc("ENTER = √∫j k√©perny≈ëk√©p"):
            if gather_path.exists():
                print(f"  ‚ÑπÔ∏è  Gather template megtartva")
            else:
                print("  ‚ö†Ô∏è Gather template kihagyva")
            return
        
        region = self.selector.select_region("GATHER GOMB")
        
        if region:
            # Screenshot √©s kiv√°g√°s
            screen = ImageGrab.grab()
            screen_np = cv2.cvtColor(np.array(screen), cv2.COLOR_RGB2BGR)
            
            x, y, w, h = region['x'], region['y'], region['width'], region['height']
            cropped = screen_np[y:y+h, x:x+w]
            
            # Ment√©s
            cv2.imwrite(str(gather_path), cropped)
            
            print(f"\n‚úÖ Gather template mentve: {gather_path}")
            print(f"   M√©ret: {w}x{h} pixel")
            print(f"   ‚ö†Ô∏è  Template matching fogja haszn√°lni (0.7 threshold)")
        else:
            if gather_path.exists():
                print(f"  ‚ÑπÔ∏è  Gather template megtartva")
            else:
                print("  ‚ö†Ô∏è Gather template kihagyva")
    
    def create_default_settings(self):
        """Alap√©rtelmezett settings.json l√©trehoz√°sa"""
        settings = {
            "repeat_count": 4,
            "max_cycles": 100,
            "human_wait_min": 3,
            "human_wait_max": 8,
            "startup_wait_min": 20,
            "startup_wait_max": 25,
            "gather_retry_attempts": 25,
            "default_march_time": 60,
            "default_gather_time": 5400
        }
        
        settings_file = self.config_dir / 'settings.json'
        with open(settings_file, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2)
        
        print("\n‚úÖ Alap√©rtelmezett be√°ll√≠t√°sok:")
        print(f"   Repeat count: {settings['repeat_count']}")
        print(f"   Max cycles: {settings['max_cycles']}")
        print(f"   Human wait: {settings['human_wait_min']}-{settings['human_wait_max']} sec")
        print(f"   Gather retry: {settings['gather_retry_attempts']}x")
        
        print(f"\nüíæ Mentve: {settings_file}")


def main():
    """Main entry point"""
    
    # J√°t√©k ablak ellen≈ërz√©se
    if not initialize_game_window("BlueStacks"):
        print("\n‚ö†Ô∏è J√°t√©k ablak nem tal√°lhat√≥!")
        print("Ind√≠tsd el a j√°t√©kot, majd futtasd √∫jra a setup-ot.\n")
        return
    
    wizard = SetupWizard()
    wizard.run()


if __name__ == "__main__":
    main()